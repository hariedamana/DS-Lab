#include<stdio.h>
#include<stdlib.h>
struct node
{
        int data;
        struct node* next;
};
struct node* top=NULL;
void push()
{
        int item;
        struct node* newnode;
        newnode=(struct node*)malloc(sizeof(struct node));
        printf("Enter the item to be inserted:");
        scanf("%d",&item);
        newnode->data=item;
        printf("%d is inserted \n",newnode->data);
        newnode->next=top;
        top=newnode;
}
void display()
{
        struct node* temp;
        if(top==NULL)
        {
                printf("stack is empty");
        }
        else
        {
                temp=top;
                while(temp!=NULL)
        {
                printf("%d \n",temp->data);
                temp=temp->next;
 }
        }
}
void search()
{
        int item;
        struct node* temp;
        if(top==NULL)
        {
        printf("Empty \n");
        }
        else
        {
        printf("Enter the item to be searched");
        scanf("%d",&item);
        temp=top;
        while(temp!=NULL)
        {
                if(temp->data==item)
                {
                        printf("Item present \n");
                        break;
                }
                else
                {
                        temp=temp->next;
                }
                printf("Item not present \n");
        }
        }
}
void pop()
{
        struct node* temp;
	 if(top==NULL)
        {
                printf("Stack underflow \n");
        }
        else
        {
                printf("%d is popped \n",top->data);
                temp=top;
                top=top->next;
                free(temp);
                display();
        }
}
int main()
{
        int ch,k=0;
        while(k==0)
        {
                printf("Enter the options \n 1.push 2.pop 3.search 4.display 5.exit");
                scanf("%d",&ch);
                switch(ch)
                {
                        case 1:push();
                               break;
                        case 2:pop();
                               break;
                        case 3:search();
                               break;
                        case 4:display();
                               break;
                        case 5:k=1;
                }
        }
return 0;
}
