#include<stdio.h>
#include<stdlib.h>
struct node
{
        int data;
        struct node *next;//Pointer to the next node
        struct node *prev;//Previous node
};
struct node *head=NULL;
struct node *end=NULL;
static int size=0;//Keep track of the Number of Nodes

//Insertion at Beginning of the list
void in_beg(int data)
{
        struct node *newnode=(struct node*)malloc(sizeof(struct node));
        newnode->data=data;
        newnode->next=head;
        newnode->prev=NULL;
        if(head!=NULL)
        {
                head->prev=newnode;
                head=newnode;
        }
        else
        {
                head=end=newnode;//If list is empty,set both head and end to newnode
        }
size++;//Increment the size
}
//Insertion at the end of the linked list
void in_end(int data)
{
        struct node *newnode=(struct node*)malloc(sizeof(struct node));
         newnode->data=data;
        newnode->next=NULL;
        newnode->prev=NULL;
        if(end==NULL)
        {
                head=end=newnode;//If list is empty,set both head and end to newnode
        }
        else
        {
                //If list is not empty,insert the element
                newnode->prev=end;
                end->next=newnode;
                end=newnode;
        }
size++;//Increment size
}

//Insertion at specific position of the list
void insert(int pos,int data)
{
        int count = 1;//Set count as 1
        struct node *newnode = (struct node*)malloc(sizeof(struct node));
        struct node *temp=head;
        newnode->data = data;
        do
        {
        if(count == pos) 
        {
        // Insert the node at the specified position
                newnode->next = temp->next;
                (temp->next)->prev = newnode;
                newnode->prev = temp;
                temp->next = newnode;
                size++;
  break;
        }
        else//(count!=pos)
        {
                count++;
                temp = temp->next;
        }
  } while (count <= pos);
}
void del_beg()
{

}
void del_end()
{

}
void delete(int pos)
{

}
//Display the Linked List
void display()
{
        struct node *temp=head;
        if(head==NULL)
        {
                printf("\nList is Empty\n");
                return;
        }
        while(temp!=NULL)
        {
                printf("%d\n",temp->data);//Print the data
                temp=temp->next;
		  }
}

//Main Function
int main()
{
        int ch,pos,data;
        do
        {
                printf("\n1.Insertion From Beginning\n2.Insertion From End\n3.Insertion at Specific Position\n4.Delete From Beginning\n5.Delete From End\n6.Delete from Specific position\n7.Display\n8.Exit\n");
                scanf("%d",&ch);
                switch (ch)
                {
                        case 1:
                        printf("Enter the data: ");
                        scanf("%d", &data);
                        in_beg(data);
                        break;
                        case 2:
                        printf("Enter the data: ");
                        scanf("%d", &data);
                        in_end(data);
                        break;
                        case 3:
                        printf("Enter the data you need to store: ");
                        scanf("%d", &data);
                        printf("Enter the position:");
                        scanf("%d", &pos);
                        if (pos < 0 || pos > size)
                        {
                                printf("\nInvalid Position!!");
                        }
                        else if (pos == 0)
                        {
                        	 {
                                in_beg(data);
                        }
                        else if (pos == size)
                        {
                                in_end(data);
                        }
                        else
                        {
                                insert(data, pos);
                        }
                        break;
                        case 4:
                        del_beg();
                        break;
                        case 5:
                        del_end();
                        break;
                        case 6:
                        printf("Enter the position:");
                        scanf("%d", &pos);
                        if (pos < 0 || pos > size)
                        {
                                printf("\nInvalid Position!!\n");
                        }
                        else if (pos == 0)
                        {
                                del_beg();
                        }
                        else if (pos == size - 1)
                        {
                                del_end();
                        }
                        else
			{
                                delete(pos);
                                break;
                        }
                        case 7:
                        display();
                        break;
                        case 8:
                        printf("\nEXIT.\n");
                        break;
                        default:
                        printf("\nInvalid Input!!\n");
                        }
        } while (ch != 8);
return 0;
}


