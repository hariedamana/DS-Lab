#include <stdio.h>
#include <stdlib.h>

#define MAX_SIZE 20

int superSet[MAX_SIZE], superSetSize;
int setA[MAX_SIZE], setB[MAX_SIZE];
int bitStringA[MAX_SIZE], bitStringB[MAX_SIZE];
int setASize, setBSize;

// Function prototypes
void getUniversalSet();
void getSet(int arr[], int *size);
void generateBitStrings();
void printBitString(int arr[], int size);
void printSetFromBitString(int arr[], int size);
void setUnion();
void setIntersection();
void setDifferenceAminusB();
void setDifferenceBminusA();

void getUniversalSet() {
    printf("Enter Universal Set Size (max %d): ", MAX_SIZE);
    scanf("%d", &superSetSize);
    if (superSetSize > MAX_SIZE) {
        printf("Error!!\n");
        exit(1);
    }

    printf("Enter %d elements for the Set:\n", superSetSize);
    for (int i = 0; i < superSetSize; i++) {
        printf("Element %d: ", i + 1);
        scanf("%d", &superSet[i]);
    }
}

void getSet(int arr[], int *size) {
    printf("Enter Set Size (max %d): ", superSetSize);
    scanf("%d", size);
    if (*size > superSetSize) {
        printf("Error!!");
        exit(1);
    }

    printf("Enter %d elements of the Set (must be from the Universal Set):\n", *size);
    for (int i = 0; i < *size; i++) {
        printf("Element %d: ", i + 1);
        scanf("%d", &arr[i]);
    }
}

void generateBitStrings() {
    for (int i = 0; i < superSetSize; i++) {
        bitStringA[i] = 0;
        bitStringB[i] = 0;
    }

    for (int i = 0; i < setASize; i++) {
        for (int j = 0; j < superSetSize; j++) {
            if (setA[i] == superSet[j]) {
                bitStringA[j] = 1;
                break;
            }
        }
    }

    for (int i = 0; i < setBSize; i++) {
        for (int j = 0; j < superSetSize; j++) {
            if (setB[i] == superSet[j]) {
                bitStringB[j] = 1;
                break;
            }
        }
    }
}

void printBitString(int arr[], int size) {
    for (int i = 0; i < size; i++) {
        printf("%d", arr[i]);
    }
    printf("\n");
}

void printSetFromBitString(int arr[], int size) {
    printf("{");
    int first = 1;
    for (int i = 0; i < size; i++) {
        if (arr[i] == 1) {
            if (!first) {
                printf(", ");
            }
            printf("%d", superSet[i]);
            first = 0;
        }
    }
    printf("}\n");
}

void setUnion() {
    int result[MAX_SIZE];
    for (int i = 0; i < superSetSize; i++) {
        result[i] = bitStringA[i] | bitStringB[i];
    }
    printf("Union: ");
    printBitString(result, superSetSize);
    printSetFromBitString(result, superSetSize);
}

void setIntersection() {
    int result[MAX_SIZE];
    for (int i = 0; i < superSetSize; i++) {
        result[i] = bitStringA[i] & bitStringB[i];
    }
    printf("Intersection: ");
    printBitString(result, superSetSize);
    printSetFromBitString(result, superSetSize);
}

void setDifferenceAminusB() {
    int result[MAX_SIZE];
    for (int i = 0; i < superSetSize; i++) {
        result[i] = bitStringA[i] & (1 - bitStringB[i]);
    }
    printf("Difference A - B: ");
    printBitString(result, superSetSize);
    printSetFromBitString(result, superSetSize);
}

void setDifferenceBminusA() {
    int result[MAX_SIZE];
    for (int i = 0; i < superSetSize; i++) {
        result[i] = bitStringB[i] & (1 - bitStringA[i]);
    }
    printf("Difference B - A: ");
    printBitString(result, superSetSize);
    printSetFromBitString(result, superSetSize);
}

int main() {
    getUniversalSet();
    getSet(setA, &setASize);
    getSet(setB, &setBSize);

    generateBitStrings();

    setUnion();            // Perform Union
    setIntersection();     // Perform Intersection
    setDifferenceAminusB(); // Perform A - B
    setDifferenceBminusA(); // Perform B - A

    return 0;
}

